<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tcsquad.ilogistics.mapper.storage.ItemMapper">
    <select id="getItemListByCategoryId" parameterType="String" resultType="Item">
        select  itemid as itemId,
                cid as categoryId,
                name,
                unitcost as unitCost,
                listprice as listPrice,
                descn,
                img as imgUrl,
                status
        from item
        where cid = #{categoryId}
    </select>

    <select id="getItemInventoryByWarehouseId" resultType="ItemInventoryResp">
        select  item.itemid      as "item.itemId",
                cid         as "item.categoryId",
                name        as "item.name",
                unitcost    as "item.unitCost",
                listprice   as "item.listPrice",
                descn       as "item.descn",
                img         as "item.imgUrl",
                status      as "item.status",
                num         as inventory
        from item,inventory
        where item.itemid = inventory.itemid and warehouseid=#{warehouseId}
    </select>

    <select id="getItem" parameterType="String" resultType="Item">
        select  itemid as itemId,
                cid as categoryId,
                name,
                unitcost as unitCost,
                listprice as listPrice,
                descn,
                img as imgUrl,
                status
        from item
        where itemid = #{itemId}
    </select>
    <insert id="insertItem" parameterType="Item">
        insert into item(itemid, cid, name, unitcost, listprice, descn, img, status)
        values
            (#{itemId} ,#{categoryId}, #{name}, #{unitCost}, #{listPrice}, #{descn}, #{imgUrl}, #{status})
    </insert>

    <update id="updateItemStatus">
        update item
        set status = #{status}
        where itemid = #{itemId}
    </update>

    <update id="updateItem">
        update item
        set
           listprice = #{listPrice},
           unitcost = #{unitCost},
           descn = #{descn},
           img = #{imgUrl},
           cid = #{categoryId},
           name =#{name}
        where itemid = #{itemId}
    </update>

    <select id="getItemInventoryByRequest" resultType="ItemInventoryResp">
        select  item.itemid      as "item.itemId",
        cid         as "item.categoryId",
        name        as "item.name",
        unitcost    as "item.unitCost",
        listprice   as "item.listPrice",
        descn       as "item.descn",
        img         as "item.imgUrl",
        status      as "item.status",
        num         as inventory,
        inventory.warehouseid   as warehouseId
        from item,inventory,warehouse
        where
                item.itemid = inventory.itemid
            and warehouse.warehouseid = inventory.warehouseid
            and warehouse.categoryid = item.cid
            and warehouse.mainsiteid = #{mainsiteId}
            <if test="keyword != null and keyword != ''">
                and item.name like '%${keyword}%'
            </if>
            <if test="categoryIdList != null and categoryIdList.length > 0">
                and item.cid in
                <foreach collection="categoryIdList" item="categoryID" open="(" close=")" separator=",">
                    #{categoryID}
                </foreach>
            </if>
            <if test="warehouseIdList != null and warehouseIdList.length > 0">
                and inventory.warehouseid in
                <foreach collection="warehouseIdList" item="warehouseID" open="(" close=")" separator=",">
                    #{warehouseID}
                </foreach>
            </if>
    </select>

    <select id="getItemListByRequest" resultType="Item">
        select  itemid      as itemId,
        cid         as categoryId,
        name        as name,
        unitcost    as unitCost,
        listprice   as listPrice,
        descn       as descn,
        img         as imgUrl,
        status      as status
        from item
        where itemid is not null
        <if test="keyword != null and keyword != ''">
            and name like '%${keyword}%'
        </if>
        <if test="categoryIdList != null and categoryIdList.length > 0">
            and cid in
            <foreach collection="categoryIdList" item="categoryID" open="(" close=")" separator=",">
                #{categoryID}
            </foreach>
        </if>
    </select>

</mapper>